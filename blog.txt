<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/kdoc_html_views-1a98987dfd.css">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-25cebea3f9.css">
                <div id="content_views" class="markdown_views prism-atom-one-light">
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <p></p> 
<div class="toc"> 
 <h3><a name="t0"></a>文章目录</h3> 
 <ul><li><a href="#_2" target="_self">前言</a></li><li><a href="#_17" target="_self">环境</a></li><li><a href="#_29" target="_self">构建数据集</a></li><li><a href="#SBERT_121" target="_self">训练SBERT模型</a></li><li><a href="#_207" target="_self">测试</a></li><li><a href="#_271" target="_self">粗排</a></li><li><a href="#_441" target="_self">精排</a></li><li><a href="#_796" target="_self">优化策略</a></li><li><a href="#_801" target="_self">结果</a></li><li><a href="#_808" target="_self">总结</a></li></ul> 
</div> 
<p></p> 
<h1><a name="t1"></a><a id="_2"></a>前言</h1> 
<p>常见的问答任务有四种：</p> 
<ul><li><strong>知识图谱问答</strong>：基于给定知识图谱生成问题对应的答案</li><li><strong>表格问答</strong>：基于给定表格集合生成问题对应的答案</li><li><strong>文本问答</strong>：基于给定文本生成问题对应的答案</li><li><strong>社区问答</strong>：基于从问答社区网站抓取的问答对进行问答任务</li></ul> 
<p>在<code>CSDN</code>主站，有个问答频道，为了降低用户重复提问率，我们需要根据用户正在提的问题，从问答库中，匹配出最相似的已采纳的问题的答案，推荐给用户。因此，这里我们要做的是社区问答任务。</p> 
<p><strong>问答对</strong>：问答社区网站上提供的<code>&lt;问题， 答案&gt;</code>对数据集合。</p> 
<p><strong>社区问答</strong>，具体来说，就是给定输入问题，社区问答从问答对中检索与输入问题语义最为匹配的已有问题，并采用该已有问题对应的答案作为当前问题的答案。由此可见，社区问答最关键的环节是计算问题和已有问题之间的语义相似度，以及计算问题和答案之间的语义相关度。</p> 
<p>基本概念清楚后，进入正题：</p> 
<h1><a name="t2"></a><a id="_17"></a>环境</h1> 
<pre data-index="0" class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">lightgbm<span class="token operator">==</span><span class="token number">3.3</span><span class="token number">.2</span>
hnswlib<span class="token operator">==</span><span class="token number">0.6</span><span class="token number">.2</span>
sentence_transformers<span class="token operator">==</span><span class="token number">1.2</span><span class="token number">.0</span>
<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></ul></pre> 
<p><code>windows</code>上应该装不上<code>hnswlib</code></p> 
<p>其他的缺啥装啥</p> 
<h1><a name="t3"></a><a id="_29"></a>构建数据集</h1> 
<p>在<code>CSDN</code>，有大量的无标注数据，但高质量的人工标注数据，少之又少。因此，我们这里也是使用无标注数据。但在构建数据的过程中，我们可以采取一些手段，将误差降到最小。</p> 
<p><strong>数据格式：</strong><br> <img src="https://img-blog.csdnimg.cn/5962ff40a9fd436297854e2088c5e61e.png" alt="在这里插入图片描述"></p> 
<p><code>q_str</code>为<code>query</code>文本<br> <code>doc_str</code>为<code>target</code>文本</p> 
<p>同一行的数据，为相似数据。即我们可以将同一行的<code>&lt;q_str, doc_str&gt;</code>对作为正样本，不同行的<code>&lt;q_str, doc_str&gt;</code>对作为负样本。</p> 
<p>接下来，我们需要对这些样本标注。这里我们使用<code>Sentence-Bert</code>的<a href="https://so.csdn.net/so/search?q=%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;预训练模型\&quot;}&quot;}" data-tit="预训练模型" data-pretit="预训练模型">预训练模型</a>来计算句向量，再计算皮尔逊系数，作为标签。</p> 
<p>关于<code>Sentence-Bert</code>原理，可以直接查看原论文：<a href="https://arxiv.org/abs/1908.10084">Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks</a></p> 
<p>关于<code>Sentence-Bert</code>基本使用，可以查看官网 <a href="https://www.sbert.net/index.html">https://www.sbert.net/index.html</a></p> 
<p><img src="https://img-blog.csdnimg.cn/4b5f151a6ff649108378ea4897be8187.png" alt="请添加图片描述"><br> 从官网可以看到，<code>all-mpnet-base-v2</code>是当前最好的模型，因此，我们在构建数据集时，可以选用效果最好的模型，<code>all-MiniLM-L6-v2</code>是当前较为均衡的模型，该模型占用内存小，推理速度快，且效果不差，因此，我们在部署到线上时，选用该模型作为基础模型来进行预训练。</p> 
<p>构建<code>SentenceTransformer</code>训练数据：</p> 
<pre data-index="1" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">def</span> <span class="token function">build_vector</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>
                data<span class="token punctuation">.</span>index<span class="token punctuation">,</span>
                data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"qid"</span><span class="token punctuation">,</span> <span class="token string">"doc_id"</span><span class="token punctuation">,</span> <span class="token string">"q_str"</span><span class="token punctuation">,</span> <span class="token string">"doc_str"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">:</span>
        count<span class="token operator">+=</span><span class="token number">1</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"当前-----------</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>count<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span><span class="token builtin">len</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">-----------"</span></span><span class="token punctuation">)</span>
        qid<span class="token punctuation">,</span> doi<span class="token punctuation">,</span> sa<span class="token punctuation">,</span> sb <span class="token operator">=</span> i

        sav <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>sa<span class="token punctuation">)</span>
        sbv <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>sb<span class="token punctuation">)</span>

        sco<span class="token punctuation">,</span> _ <span class="token operator">=</span> pearsonr<span class="token punctuation">(</span>sav<span class="token punctuation">,</span> sbv<span class="token punctuation">)</span>
        l <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> sco<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        d <span class="token operator">=</span> InputExample<span class="token punctuation">(</span>texts<span class="token operator">=</span><span class="token punctuation">[</span>sa<span class="token punctuation">,</span> sb<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>l<span class="token punctuation">)</span>
        data_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
        <span class="token keyword">for</span> n_idx <span class="token keyword">in</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> n_idx <span class="token operator">!=</span> idx <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>sa<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                sb_n <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>n_idx<span class="token punctuation">,</span> <span class="token string">"doc_str"</span><span class="token punctuation">]</span>
                sbnv <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>sb_n<span class="token punctuation">)</span>
                sco<span class="token punctuation">,</span> _ <span class="token operator">=</span> pearsonr<span class="token punctuation">(</span>sav<span class="token punctuation">,</span> sbnv<span class="token punctuation">)</span>
                l <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">+</span> sco<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                dn <span class="token operator">=</span> InputExample<span class="token punctuation">(</span>texts<span class="token operator">=</span><span class="token punctuation">[</span>sa<span class="token punctuation">,</span> sb_n<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>l<span class="token punctuation">)</span>
                data_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dn<span class="token punctuation">)</span>
    <span class="token keyword">return</span> data_res


<span class="token keyword">def</span> <span class="token function">test_build_dataset</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">:</span>
    dir_path <span class="token operator">=</span> <span class="token string">"./data/datasets/answer/sts_dset"</span>
    data_full_train<span class="token punctuation">,</span> data_full_dev <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span>dir_path<span class="token operator">=</span>dir_path<span class="token punctuation">,</span> dd_cache<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    data_full_train<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"./test/answer/data/train.csv"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    data_full_dev<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"./test/answer/data/dev.csv"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    data_full_train <span class="token operator">=</span> data_full_train<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data_full_dev <span class="token operator">=</span> data_full_dev<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>

    data_full_train_idx <span class="token operator">=</span> data_full_train<span class="token punctuation">.</span>index
    data_full_dev_idx <span class="token operator">=</span> data_full_dev<span class="token punctuation">.</span>index

    model_name<span class="token operator">=</span><span class="token string">"sentence-transformers/all-mpnet-base-v2"</span>
    train_data_save_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> model_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>train_data_save_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>train_data_save_dir<span class="token punctuation">)</span>
    word_embedding_model <span class="token operator">=</span> models<span class="token punctuation">.</span>Transformer<span class="token punctuation">(</span>
        model_name
    <span class="token punctuation">)</span>
    pooling_model <span class="token operator">=</span> models<span class="token punctuation">.</span>Pooling<span class="token punctuation">(</span>
        word_embedding_model<span class="token punctuation">.</span>get_word_embedding_dimension<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        pooling_mode_mean_tokens<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        pooling_mode_cls_token<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
        pooling_mode_max_tokens<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    model <span class="token operator">=</span> SentenceTransformer<span class="token punctuation">(</span>modules<span class="token operator">=</span><span class="token punctuation">[</span>word_embedding_model<span class="token punctuation">,</span> pooling_model<span class="token punctuation">]</span><span class="token punctuation">)</span>
    data_train <span class="token operator">=</span> build_vector<span class="token punctuation">(</span>index<span class="token operator">=</span>data_full_train_idx<span class="token punctuation">,</span> data<span class="token operator">=</span>data_full_train<span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span>
    data_dev <span class="token operator">=</span> build_vector<span class="token punctuation">(</span>index<span class="token operator">=</span>data_full_dev_idx<span class="token punctuation">,</span> data<span class="token operator">=</span>data_full_dev<span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span>
    pd<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span>data_train<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_data_save_dir<span class="token punctuation">}</span></span><span class="token string">/data_train_sts_float.pkl"</span></span><span class="token punctuation">)</span>
    pd<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span>data_dev<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_data_save_dir<span class="token punctuation">}</span></span><span class="token string">/data_dev_sts_float.pkl"</span></span><span class="token punctuation">)</span>
<div class="hljs-button {2}" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li><li style="color: rgb(153, 153, 153);">42</li><li style="color: rgb(153, 153, 153);">43</li><li style="color: rgb(153, 153, 153);">44</li><li style="color: rgb(153, 153, 153);">45</li><li style="color: rgb(153, 153, 153);">46</li><li style="color: rgb(153, 153, 153);">47</li><li style="color: rgb(153, 153, 153);">48</li><li style="color: rgb(153, 153, 153);">49</li><li style="color: rgb(153, 153, 153);">50</li><li style="color: rgb(153, 153, 153);">51</li><li style="color: rgb(153, 153, 153);">52</li><li style="color: rgb(153, 153, 153);">53</li><li style="color: rgb(153, 153, 153);">54</li><li style="color: rgb(153, 153, 153);">55</li><li style="color: rgb(153, 153, 153);">56</li><li style="color: rgb(153, 153, 153);">57</li><li style="color: rgb(153, 153, 153);">58</li></ul></pre> 
<p><strong>皮尔逊相关系数</strong>用于度量两个变量<code>(X和Y)</code>之间的线性相关程度，其值介于<code>-1</code>与<code>1</code>之间。</p> 
<p>在上述代码中，为了便于计算，我将皮尔逊相关系数的值从<code>[-1,1]</code>之间映射到了<code>[0,1]</code>之间，值越大，越相关，值越小，越不相关。</p> 
<p>值得注意的是，我们这里的训练数据是<code>&lt;query, answer&gt;</code> 对，更为正确的做法是使用<code>&lt;query, query&gt;</code>对作为训练数据。奈何没有高质量的人工标注数据，只能先用<code>&lt;query, answer&gt;</code>训练出一版模型看看效果。</p> 
<h1><a name="t4"></a><a id="SBERT_121"></a>训练S<a href="https://so.csdn.net/so/search?q=BERT%E6%A8%A1%E5%9E%8B&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=BERT%E6%A8%A1%E5%9E%8B&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;BERT模型\&quot;}&quot;}" data-tit="BERT模型" data-pretit="bert模型">BERT模型</a></h1> 
<p>说实话，这训练代码，是真的简单，不信看代码：</p> 
<pre data-index="2" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> os
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> sentence_transformers <span class="token keyword">import</span> SentenceTransformer<span class="token punctuation">,</span> SentencesDataset<span class="token punctuation">,</span> models
<span class="token keyword">from</span> sentence_transformers <span class="token keyword">import</span> InputExample<span class="token punctuation">,</span> evaluation<span class="token punctuation">,</span> losses
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> common<span class="token punctuation">.</span>path<span class="token punctuation">.</span>model<span class="token punctuation">.</span>sentence_model <span class="token keyword">import</span> get_sentence_model_dir

<span class="token keyword">class</span> <span class="token class-name">TrainSentectTransformerModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>model_name<span class="token operator">=</span><span class="token string">"sentence-transformers/multi-qa-MiniLM-L6-cos-v1"</span>
        self<span class="token punctuation">.</span>build_dataset_model_name <span class="token operator">=</span> <span class="token string">"all-mpnet-base-v2"</span>
        self<span class="token punctuation">.</span>data_dir_path <span class="token operator">=</span> <span class="token string">"./data/datasets/answer/sts_dset"</span>

        self<span class="token punctuation">.</span>data_dir_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_dir_path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>build_dataset_model_name<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>train_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_dir_path<span class="token punctuation">,</span> <span class="token string">"data_train_sts_float.pkl"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dev_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_dir_path<span class="token punctuation">,</span> <span class="token string">"data_dev_sts_float.pkl"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>model_save_dir <span class="token operator">=</span> get_sentence_model_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model_save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model_save_dir<span class="token punctuation">,</span>  self<span class="token punctuation">.</span>model_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        word_embedding_model <span class="token operator">=</span> models<span class="token punctuation">.</span>Transformer<span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>model_name
        <span class="token punctuation">)</span>
        pooling_model <span class="token operator">=</span> models<span class="token punctuation">.</span>Pooling<span class="token punctuation">(</span>
            word_embedding_model<span class="token punctuation">.</span>get_word_embedding_dimension<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            pooling_mode_mean_tokens<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
            pooling_mode_cls_token<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
            pooling_mode_max_tokens<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model <span class="token operator">=</span> SentenceTransformer<span class="token punctuation">(</span>modules<span class="token operator">=</span><span class="token punctuation">[</span>word_embedding_model<span class="token punctuation">,</span> pooling_model<span class="token punctuation">]</span><span class="token punctuation">)</span>
    

    <span class="token keyword">def</span> <span class="token function">load_train_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_pickle<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_path<span class="token punctuation">)</span>
        train_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> train_data<span class="token punctuation">:</span>
            sa<span class="token punctuation">,</span> sb <span class="token operator">=</span> item<span class="token punctuation">.</span>texts
            label <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>label<span class="token punctuation">)</span>
            dn <span class="token operator">=</span> InputExample<span class="token punctuation">(</span>texts<span class="token operator">=</span><span class="token punctuation">[</span>sa<span class="token punctuation">,</span> sb<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span>
            train_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dn<span class="token punctuation">)</span>
        train_dataset <span class="token operator">=</span> SentencesDataset<span class="token punctuation">(</span>train_data_list<span class="token punctuation">,</span> self<span class="token punctuation">.</span>model<span class="token punctuation">)</span>
        train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> train_dataloader


    <span class="token keyword">def</span> <span class="token function">load_dev_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sentences1<span class="token punctuation">,</span> sentences2<span class="token punctuation">,</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        dev_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_pickle<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dev_path<span class="token punctuation">)</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> dev_data<span class="token punctuation">:</span>
            sa<span class="token punctuation">,</span> sb <span class="token operator">=</span> item<span class="token punctuation">.</span>texts
            label <span class="token operator">=</span> item<span class="token punctuation">.</span>label
            sentences1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sa<span class="token punctuation">)</span>
            sentences2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sb<span class="token punctuation">)</span>
            <span class="token keyword">if</span> label <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">:</span>
                label <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                label <span class="token operator">=</span> <span class="token number">0</span>
            scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>
        <span class="token keyword">return</span> sentences1<span class="token punctuation">,</span> sentences2<span class="token punctuation">,</span> scores

    
    
    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>
        train_dataloader <span class="token operator">=</span> self<span class="token punctuation">.</span>load_train_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        dev_sentences1<span class="token punctuation">,</span> dev_sentences2<span class="token punctuation">,</span> dev_scores <span class="token operator">=</span> self<span class="token punctuation">.</span>load_dev_data<span class="token punctuation">(</span><span class="token punctuation">)</span>

        train_loss <span class="token operator">=</span> losses<span class="token punctuation">.</span>CosineSimilarityLoss<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">)</span>
        evaluator <span class="token operator">=</span> evaluation<span class="token punctuation">.</span>BinaryClassificationEvaluator<span class="token punctuation">(</span>dev_sentences1<span class="token punctuation">,</span> dev_sentences2<span class="token punctuation">,</span> dev_scores<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_objectives<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">,</span> train_loss<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> warmup_steps<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>
          evaluator<span class="token operator">=</span>evaluator<span class="token punctuation">,</span> evaluation_steps<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_path<span class="token operator">=</span> self<span class="token punctuation">.</span>model_save_path<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>evaluator<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
<div class="hljs-button {2}" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li><li style="color: rgb(153, 153, 153);">42</li><li style="color: rgb(153, 153, 153);">43</li><li style="color: rgb(153, 153, 153);">44</li><li style="color: rgb(153, 153, 153);">45</li><li style="color: rgb(153, 153, 153);">46</li><li style="color: rgb(153, 153, 153);">47</li><li style="color: rgb(153, 153, 153);">48</li><li style="color: rgb(153, 153, 153);">49</li><li style="color: rgb(153, 153, 153);">50</li><li style="color: rgb(153, 153, 153);">51</li><li style="color: rgb(153, 153, 153);">52</li><li style="color: rgb(153, 153, 153);">53</li><li style="color: rgb(153, 153, 153);">54</li><li style="color: rgb(153, 153, 153);">55</li><li style="color: rgb(153, 153, 153);">56</li><li style="color: rgb(153, 153, 153);">57</li><li style="color: rgb(153, 153, 153);">58</li><li style="color: rgb(153, 153, 153);">59</li><li style="color: rgb(153, 153, 153);">60</li><li style="color: rgb(153, 153, 153);">61</li><li style="color: rgb(153, 153, 153);">62</li><li style="color: rgb(153, 153, 153);">63</li><li style="color: rgb(153, 153, 153);">64</li><li style="color: rgb(153, 153, 153);">65</li><li style="color: rgb(153, 153, 153);">66</li><li style="color: rgb(153, 153, 153);">67</li><li style="color: rgb(153, 153, 153);">68</li><li style="color: rgb(153, 153, 153);">69</li><li style="color: rgb(153, 153, 153);">70</li><li style="color: rgb(153, 153, 153);">71</li><li style="color: rgb(153, 153, 153);">72</li><li style="color: rgb(153, 153, 153);">73</li><li style="color: rgb(153, 153, 153);">74</li><li style="color: rgb(153, 153, 153);">75</li><li style="color: rgb(153, 153, 153);">76</li><li style="color: rgb(153, 153, 153);">77</li><li style="color: rgb(153, 153, 153);">78</li></ul></pre> 
<p>是吧，训练很简单，只有些数据处理的操作</p> 
<h1><a name="t5"></a><a id="_207"></a>测试</h1> 
<p>训练完成后，我们来试试效果：</p> 
<pre data-index="3" class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">def</span> <span class="token function">test_sentence_model</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model_dir <span class="token operator">=</span> <span class="token string">"./data/models/sentence_model/multi-qa-MiniLM-L6-cos-v1"</span>
    model <span class="token operator">=</span> SentenceTransformer<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>
    query_sentence <span class="token operator">=</span> <span class="token string">"hp服务器序列号"</span>
    target_sentences <span class="token operator">=</span> <span class="token string">"xmind2021激活序列号"</span>
    query_vector <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>query_sentence<span class="token punctuation">]</span><span class="token punctuation">)</span>
    target_vectors <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>target_sentences<span class="token punctuation">]</span><span class="token punctuation">)</span>
    score <span class="token operator">=</span> cosine_similarity<span class="token punctuation">(</span>query_vector<span class="token punctuation">,</span> target_vectors<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li></ul></pre> 
<p>输出：</p> 
<pre data-index="4" class="prettyprint"><code class="prism language-bash has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token number">0.46232918</span>
<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre> 
<p>再使用一条典型数据来测试下：</p> 
<pre data-index="5" class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">query_sentence <span class="token operator">=</span> <span class="token string">"引入Echart后无法引用echart.方法 先下载了Echarts包，然后在head里引入了echarts.js，定义div并赋予了大小"</span>
target_sentences <span class="token operator">=</span> <span class="token string">"echarts隐藏柱体，但要在悬浮中显示数据 echarts需要隐藏某个柱状图的柱体，但是要在悬浮中有显示这个隐藏柱体的数据"</span>

<span class="token comment"># score = 0.9297024</span>
<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li></ul></pre> 
<p>我们来分析下，这两条数据，有部分重叠的关键词，但整体语义，并不相关，语义相似度应该很低才对，但我们的模型，给出的分数竟然有<code>0.92</code>，出乎意料。</p> 
<p>我们再来看下我们的训练数据：</p> 
<pre data-index="6" class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">q_str <span class="token operator">=</span> <span class="token string">"python 实现sql递归"</span>
doc_str <span class="token operator">=</span> <span class="token string">"python实现递归的例子 用递归实现阶乘    def   func (n) :       if  n ==  1 :          return   1       else :          return  n * func(n- 1 )    用递归实现斐波那契数列      def   fibo (n) :       if  n ==  1   or  n ==  2 :          return   1       else :          return  fibo(n- 1 ) + fibo(n- 2 )     用递归实现二分查找      def   b_sort (l, aim, start= 0 , end=None) :       if  end ==  None : end = len(l)- 1       if  start &lt;= end:         mid = (end-start) //  2  + start  #保证每次都是相应的数列位置           if  aim &lt; l[mid]:              return  b_sort(l, aim, s"</span>
<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre> 
<p>我们的训练数据，<code>q_str</code> 与 <code>doc_str</code>之间也是存在部分关键词重叠，但二者语义是相关的。</p> 
<p>因此，造成上面测试用例语义得分太高的原因显而易见了。训练时我们使用 <code>&lt;query, answer&gt;</code>对，预测时我们使用 <code>&lt;query, query&gt;</code>对，训练与预测不一致，导致即使有部分关键词重叠，但整体语义相差较大，模型输出的得分较大。</p> 
<p>那么，既然我们没有<code>&lt;query, query&gt;</code>对格式的数据，我们做到这里，只能放弃了吗？</p> 
<p>不！<strong>CSDN AI小组</strong>没有放弃！</p> 
<p>首先，我们需要确定的是，这个模型，对于语义相关的数据，是有效的！（已经通过实验证实，确实是有效）</p> 
<p>既然模型有效，那么，我们只需要过滤掉只有部分关键词重合，但整体语义不相关的数据就可以了。</p> 
<p>怎么过滤呢？</p> 
<p>答案是：我们再训练一个<code>tfidf</code>模型，计算<code>query_a</code> 与 <code>query_b</code>的<code>tfidf</code>得分，只有部分关键词重合的数据，其关键词得分应该是较低的。</p> 
<p>那么，我们计算下之前使用过的两条<code>query</code>的<code>tfidf</code>得分：</p> 
<pre data-index="7" class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">query_a <span class="token operator">=</span> <span class="token string">"引入Echart后无法引用echart.方法 先下载了Echarts包，然后在head里引入了echarts.js，定义div并赋予了大小"</span>
query_b <span class="token operator">=</span> <span class="token string">"echarts隐藏柱体，但要在悬浮中显示数据 echarts需要隐藏某个柱状图的柱体，但是要在悬浮中有显示这个隐藏柱体的数据"</span>

tfidf_score <span class="token operator">=</span> <span class="token number">0.1512441662635543</span>
<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li></ul></pre> 
<p>确实是较低！（当然，并不是通过这一条数据得出的结论）</p> 
<p>加入<code>tfidf</code>限制后，<code>query</code>与<code>query</code>之间存在重叠关键词但语义不相关的问题得到了解决。</p> 
<p>那么，语义匹配的问题，就解决了。接下来需要考虑的是，<code>CSDN</code>问答库中，有<code>50w</code>左右的已采纳数据，这么大的数据量，总不能用<code>query</code>去与所有数据一一计算相似度吧？显然，这是不现实的。</p> 
<h1><a name="t6"></a><a id="_271"></a>粗排</h1> 
<p>在大多数的问答系统中，一般分为三个模块：</p> 
<ul><li>意图识别</li><li>粗排</li><li>精排</li></ul> 
<p>在这里，我们暂时没有做意图识别模块，也许，后续数据量大了，会加入意图识别。加入意图识别，有以下好处：</p> 
<ul><li>缩小匹配范围</li><li>提升匹配效率</li><li>提升匹配准确率</li></ul> 
<p>如果你的数据量够大，至少每个类别下面有几十万的数据，你可以考虑加入意图识别模块来提升你问答系统整体的效果。</p> 
<p>那么，我们要怎么构建自己的问答数据库呢？</p> 
<p>由于我们的数据都是文本，要计算文本之间的语义相似度，首先我们需要将文本转换成向量，转成向量后，我们需要构建一个倒排索引表，将这些文本数据，存入倒排表中。类似<code>Elasticsearch</code>在建立索引的时候采用的倒排索引的机制（强烈建议去了解下）。</p> 
<p><strong>HNSW</strong>就是一种构建倒排索引以达到快速检索的算法，在这篇文章中，采用的便是这种算法。<br> 有关<strong>HNSW</strong>的原理，推荐阅读：<a href="https://blog.csdn.net/u011233351/article/details/85116719">一文看懂HNSW算法理论的来龙去脉</a></p> 
<p>好在<code>python</code>各种包多，不管啥算法，都有前人帮你实现了，你只要<code>pip</code>一下，就能用了。<br> <code>hnsw</code>的实现，有两个包，一个是<code>Facebook</code>研发的<code>faiss</code>，一个是<code>hnswlib</code>，这里我使用的是<code>hnswlib</code>，据说二者都是<code>c++</code>实现，使用起来没太大差别。</p> 
<p>hnswlib使用手册：<a href="https://github.com/nmslib/hnswlib">https://github.com/nmslib/hnswlib</a></p> 
<pre data-index="8" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">class</span> <span class="token class-name">HNSW</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>hnsw_config <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>
            <span class="token string">"M"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span>
            <span class="token string">"ef"</span><span class="token punctuation">:</span> <span class="token number">2000</span>
        <span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>hnsw_model_path <span class="token operator">=</span> get_sentence_hnsw_model_path<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>hnsw_vec_data_path <span class="token operator">=</span> get_hnsw_vec_data_path<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>answer_pg_query <span class="token operator">=</span> AnswerPgQuery<span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sentence_transform_model_path <span class="token operator">=</span> get_sentence_transformers_model_path<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token string">"sentence_transformer"</span>
        self<span class="token punctuation">.</span>sentence_model <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>hnsw <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hnsw_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"加载 hnsw ..."</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>hnsw <span class="token operator">=</span> self<span class="token punctuation">.</span>load_hnsw<span class="token punctuation">(</span><span class="token punctuation">)</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"加载 sentence transformer model ..."</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cpu"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sentence_model <span class="token operator">=</span> SentenceTransformer<span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>sentence_transform_model_path<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        all_answer_data <span class="token operator">=</span> self<span class="token punctuation">.</span>answer_pg_query<span class="token punctuation">.</span>fetch_all_answer_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>all_answer_data<span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"get vec </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>self<span class="token punctuation">.</span>method<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            title <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            body <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            body <span class="token operator">=</span> get_text_from_html<span class="token punctuation">(</span>body<span class="token punctuation">)</span>
            text_vec <span class="token operator">=</span> self<span class="token punctuation">.</span>sentence_model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>title <span class="token operator">+</span> body<span class="token punctuation">]</span><span class="token punctuation">)</span>
            sentence_vec <span class="token operator">=</span> text_vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sentence_vec<span class="token punctuation">)</span>
        joblib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hnsw_vec_data_path<span class="token punctuation">)</span>

        <span class="token keyword">return</span> data

    <span class="token keyword">def</span> <span class="token function">train_hnsw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sentences_vec <span class="token operator">=</span> self<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        cores <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
        num_elements <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentences_vec<span class="token punctuation">)</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"初始化 hnsw ..."</span><span class="token punctuation">)</span>

        <span class="token comment"># possible options are l2, cosine or ip</span>
        <span class="token keyword">import</span> hnswlib
        p <span class="token operator">=</span> hnswlib<span class="token punctuation">.</span>Index<span class="token punctuation">(</span>space<span class="token operator">=</span><span class="token string">'l2'</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">384</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>init_index<span class="token punctuation">(</span>max_elements<span class="token operator">=</span>num_elements<span class="token punctuation">,</span>
                     ef_construction<span class="token operator">=</span>self<span class="token punctuation">.</span>hnsw_config<span class="token punctuation">[</span><span class="token string">'ef'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> M<span class="token operator">=</span>self<span class="token punctuation">.</span>hnsw_config<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>set_ef<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>set_num_threads<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Adding first batch of %d elements"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentences_vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>add_items<span class="token punctuation">(</span>sentences_vec<span class="token punctuation">)</span>
        labels<span class="token punctuation">,</span> distances <span class="token operator">=</span> p<span class="token punctuation">.</span>knn_query<span class="token punctuation">(</span>sentences_vec<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'labels: '</span><span class="token punctuation">,</span> labels<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'distances: '</span><span class="token punctuation">,</span> distances<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Recall:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>
            np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>labels<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentences_vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>save_index<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hnsw_model_path<span class="token punctuation">)</span>
        <span class="token keyword">del</span> p

    <span class="token keyword">def</span> <span class="token function">load_hnsw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">import</span> hnswlib
        hnsw <span class="token operator">=</span> hnswlib<span class="token punctuation">.</span>Index<span class="token punctuation">(</span>space<span class="token operator">=</span><span class="token string">'l2'</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">384</span><span class="token punctuation">)</span>
        hnsw<span class="token punctuation">.</span>load_index<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hnsw_model_path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> hnsw

    <span class="token keyword">def</span> <span class="token function">add_elements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_vec<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">import</span> hnswlib
        hnsw <span class="token operator">=</span> hnswlib<span class="token punctuation">.</span>Index<span class="token punctuation">(</span>space<span class="token operator">=</span><span class="token string">'l2'</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">384</span><span class="token punctuation">)</span>
        hnsw<span class="token punctuation">.</span>load_index<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hnsw_model_path<span class="token punctuation">)</span>

        current_elements_num <span class="token operator">=</span> hnsw<span class="token punctuation">.</span>element_count

        max_elements <span class="token operator">=</span> current_elements_num <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_vec<span class="token punctuation">)</span>

        hnsw_copy <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>hnsw<span class="token punctuation">)</span>
        <span class="token keyword">del</span> hnsw

        hnsw_copy<span class="token punctuation">.</span>load_index<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hnsw_model_path<span class="token punctuation">,</span> max_elements<span class="token punctuation">)</span>

        hnsw_copy<span class="token punctuation">.</span>add_items<span class="token punctuation">(</span>data_vec<span class="token punctuation">)</span>

        hnsw_copy<span class="token punctuation">.</span>save_index<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hnsw_model_path<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        text_vec <span class="token operator">=</span> self<span class="token punctuation">.</span>sentence_model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span>
        q_labels<span class="token punctuation">,</span> q_distances <span class="token operator">=</span> self<span class="token punctuation">.</span>hnsw<span class="token punctuation">.</span>knn_query<span class="token punctuation">(</span>text_vec<span class="token punctuation">,</span> k<span class="token operator">=</span>k<span class="token punctuation">)</span>
        <span class="token keyword">return</span> q_labels<span class="token punctuation">,</span> q_distances

    <span class="token keyword">def</span> <span class="token function">get_search_result</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>
        q_labels<span class="token punctuation">,</span> q_distances <span class="token operator">=</span> self<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
        indexs <span class="token operator">=</span> q_labels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token comment"># 取得粗排结果</span>

        res_str <span class="token operator">=</span> <span class="token string">""</span>
        <span class="token keyword">for</span> index <span class="token keyword">in</span> indexs<span class="token punctuation">:</span>
            index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
            ret <span class="token operator">=</span> self<span class="token punctuation">.</span>answer_pg_query<span class="token punctuation">.</span>query_answer_data_by_index<span class="token punctuation">(</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
            title <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            body <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
            res_str <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f"Query : </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>text<span class="token punctuation">}</span></span><span class="token string"> , Target : </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>title<span class="token punctuation">}</span></span><span class="token string"> \n"</span></span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>res_str<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
<div class="hljs-button {2}" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li><li style="color: rgb(153, 153, 153);">42</li><li style="color: rgb(153, 153, 153);">43</li><li style="color: rgb(153, 153, 153);">44</li><li style="color: rgb(153, 153, 153);">45</li><li style="color: rgb(153, 153, 153);">46</li><li style="color: rgb(153, 153, 153);">47</li><li style="color: rgb(153, 153, 153);">48</li><li style="color: rgb(153, 153, 153);">49</li><li style="color: rgb(153, 153, 153);">50</li><li style="color: rgb(153, 153, 153);">51</li><li style="color: rgb(153, 153, 153);">52</li><li style="color: rgb(153, 153, 153);">53</li><li style="color: rgb(153, 153, 153);">54</li><li style="color: rgb(153, 153, 153);">55</li><li style="color: rgb(153, 153, 153);">56</li><li style="color: rgb(153, 153, 153);">57</li><li style="color: rgb(153, 153, 153);">58</li><li style="color: rgb(153, 153, 153);">59</li><li style="color: rgb(153, 153, 153);">60</li><li style="color: rgb(153, 153, 153);">61</li><li style="color: rgb(153, 153, 153);">62</li><li style="color: rgb(153, 153, 153);">63</li><li style="color: rgb(153, 153, 153);">64</li><li style="color: rgb(153, 153, 153);">65</li><li style="color: rgb(153, 153, 153);">66</li><li style="color: rgb(153, 153, 153);">67</li><li style="color: rgb(153, 153, 153);">68</li><li style="color: rgb(153, 153, 153);">69</li><li style="color: rgb(153, 153, 153);">70</li><li style="color: rgb(153, 153, 153);">71</li><li style="color: rgb(153, 153, 153);">72</li><li style="color: rgb(153, 153, 153);">73</li><li style="color: rgb(153, 153, 153);">74</li><li style="color: rgb(153, 153, 153);">75</li><li style="color: rgb(153, 153, 153);">76</li><li style="color: rgb(153, 153, 153);">77</li><li style="color: rgb(153, 153, 153);">78</li><li style="color: rgb(153, 153, 153);">79</li><li style="color: rgb(153, 153, 153);">80</li><li style="color: rgb(153, 153, 153);">81</li><li style="color: rgb(153, 153, 153);">82</li><li style="color: rgb(153, 153, 153);">83</li><li style="color: rgb(153, 153, 153);">84</li><li style="color: rgb(153, 153, 153);">85</li><li style="color: rgb(153, 153, 153);">86</li><li style="color: rgb(153, 153, 153);">87</li><li style="color: rgb(153, 153, 153);">88</li><li style="color: rgb(153, 153, 153);">89</li><li style="color: rgb(153, 153, 153);">90</li><li style="color: rgb(153, 153, 153);">91</li><li style="color: rgb(153, 153, 153);">92</li><li style="color: rgb(153, 153, 153);">93</li><li style="color: rgb(153, 153, 153);">94</li><li style="color: rgb(153, 153, 153);">95</li><li style="color: rgb(153, 153, 153);">96</li><li style="color: rgb(153, 153, 153);">97</li><li style="color: rgb(153, 153, 153);">98</li><li style="color: rgb(153, 153, 153);">99</li><li style="color: rgb(153, 153, 153);">100</li><li style="color: rgb(153, 153, 153);">101</li><li style="color: rgb(153, 153, 153);">102</li><li style="color: rgb(153, 153, 153);">103</li><li style="color: rgb(153, 153, 153);">104</li><li style="color: rgb(153, 153, 153);">105</li><li style="color: rgb(153, 153, 153);">106</li></ul></pre> 
<p>在构建句向量时，我使用的是前面训练好的<code>SBERT</code>模型。有些人可能会说，使用<code>word2vec</code>来构建句向量不行吗？<br> 我的回答是：不行！<br> 因为训练好的<code>word2vec</code>太大了，就拿这个例子来说，<code>50w</code>的数据，训练出来的<code>word2vec</code>的大小已经达到了<code>GB</code>级别，服务器上内存本来就紧张，你再加个<code>GB</code>级别的模型，服务器分分钟被你干崩溃，等着写事故报告吧！</p> 
<p>由于开发时间问题，我这里只尝试了<code>SBERT</code>去构建句向量，其实，你还可以尝试使用<code>AutoEncoder</code>的方法去构建句向量。关于<code>AutoEncoder</code>原理，可以参考：<a href="https://zhuanlan.zhihu.com/p/58111908">深入理解AutoEncoder</a></p> 
<p>在度量相似度时，<code>hnswlib</code>支持三种方式，如下图：<br> <img src="https://img-blog.csdnimg.cn/76e8cf72e3fe44da8f7005021f285673.png" alt="请添加图片描述"><br> 这里我选择了<code>Squared L2</code>，哪一种方式更准确，我并没有去做对比实验，如果你构建句向量的模型足够准确，理论上差距不大。</p> 
<p>我们来看看效果：</p> 
<pre data-index="9" class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> Python重量计算 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> 有关python制作七段数码管的问题 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> python数字与字母分离 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> python昆虫繁殖问题 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> 各位朋友 如何用python语言表达 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> python复利计算利息 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> python如何用时间遍历很多个月 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> 简单的Python题求解 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> Python输入上课时间的总秒数，计算今天上课时间是多少小时多少分多少秒的方式表示出来 
Query <span class="token punctuation">:</span> Python重量计算 重量计算 月球上的物体重量是地球上的<span class="token number">16.5</span><span class="token operator">%</span> <span class="token punctuation">,</span> Target <span class="token punctuation">:</span> Python上机实践，字符类型及其操作 
<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li></ul></pre> 
<p>确实可以找到目标答案，从这里也可以看出，使用<code>&lt;query, answer&gt;</code>对去训练<code>SBERT</code>，虽然会带来负面作用，但可以粗略表示句向量。</p> 
<p>从上面的代码中，可以看出，<code>hnswlib</code>还支持增量数据插入，这样，就不需要每次全量更新倒排索引表了，只需要将新增的数据插入到索引表中就可以，大大减少了计算量。</p> 
<p><strong>注意：</strong> 我们拿到的召回结果，只是<code>query</code>文本的句向量对应的下标索引，因此，我们的原始数据，需要保存在数据库中，这样，才能通过召回结果，找到源数据。</p> 
<h1><a name="t7"></a><a id="_441"></a>精排</h1> 
<p>粗排的过程，一般也称之为召回，取得召回的结果后，我们需要对召回的结果，进行精排。</p> 
<p>精排的过程，其实就是将<code>query</code>与召回的结果，一一计算相似度，取出得分最大的那一条数据，作为输出。我们这里，精排模型使用的是我们一开始训练的<code>SBERT</code>模型，将<code>query</code>和召回的结果，转换成句向量，用<code>query</code>与召回结果一一计算余弦相似度。</p> 
<pre data-index="10" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">    <span class="token keyword">def</span> <span class="token function">get_tfidf_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query_text<span class="token punctuation">,</span> target_text<span class="token punctuation">)</span><span class="token punctuation">:</span>
        str_a_list <span class="token operator">=</span> self<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>segment<span class="token punctuation">(</span>query_text<span class="token punctuation">)</span>
        str_b_list <span class="token operator">=</span> self<span class="token punctuation">.</span>segment<span class="token punctuation">.</span>segment<span class="token punctuation">(</span>target_text<span class="token punctuation">)</span>
        text_a <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str_a_list<span class="token punctuation">)</span>
        text_b <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str_b_list<span class="token punctuation">)</span>
        vec_a <span class="token operator">=</span> self<span class="token punctuation">.</span>tfidf<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span>text_a<span class="token punctuation">]</span><span class="token punctuation">)</span>
        vec_b <span class="token operator">=</span> self<span class="token punctuation">.</span>tfidf<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span>text_b<span class="token punctuation">]</span><span class="token punctuation">)</span>
        sim <span class="token operator">=</span> cosine_similarity<span class="token punctuation">(</span>vec_a<span class="token punctuation">,</span> vec_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> sim


    <span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"获取召回结果..."</span><span class="token punctuation">)</span>
        q_labels<span class="token punctuation">,</span> q_distances <span class="token operator">=</span> self<span class="token punctuation">.</span>hnsw<span class="token punctuation">.</span>search<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
        indexs <span class="token operator">=</span> q_labels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        
        <span class="token comment"># 取得粗排结果</span>
        recall_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> index <span class="token keyword">in</span> indexs<span class="token punctuation">:</span>
            index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
            ret <span class="token operator">=</span> self<span class="token punctuation">.</span>answer_pg_query<span class="token punctuation">.</span>query_answer_data_by_index<span class="token punctuation">(</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            question_id <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            title <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            body <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
            answer_id <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
            tag_ids <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
            item <span class="token operator">=</span> <span class="token punctuation">(</span>query<span class="token punctuation">,</span> question_id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> answer_id<span class="token punctuation">,</span> tag_ids<span class="token punctuation">)</span>
            recall_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        
        <span class="token comment"># 准备精排需要的相似度特征</span>
        lightgbm_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">,</span> <span class="token string">'target_question_id'</span><span class="token punctuation">,</span> <span class="token string">'target_title'</span><span class="token punctuation">,</span> <span class="token string">'target_body'</span><span class="token punctuation">,</span> <span class="token string">'answer_id'</span><span class="token punctuation">,</span> <span class="token string">'tag_ids'</span><span class="token punctuation">,</span> <span class="token string">'bert_cos'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> idx<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>recall_res<span class="token punctuation">)</span><span class="token punctuation">:</span>
            query<span class="token punctuation">,</span> question_id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> answer_id<span class="token punctuation">,</span> tag_ids <span class="token operator">=</span> item
            target <span class="token operator">=</span> title <span class="token operator">+</span> body
            bert_cos <span class="token operator">=</span> self<span class="token punctuation">.</span>text_similarity_bert<span class="token punctuation">.</span>bert_sim<span class="token punctuation">(</span>query<span class="token punctuation">,</span> target<span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'cos'</span><span class="token punctuation">)</span>

            lightgbm_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> question_id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> answer_id<span class="token punctuation">,</span> tag_ids<span class="token punctuation">,</span> bert_cos<span class="token punctuation">]</span>
        
        <span class="token comment"># 精排</span>

        lightgbm_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"bert_cos"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> idx<span class="token punctuation">,</span> row <span class="token keyword">in</span> lightgbm_df<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            query_ret <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>
            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token string">'bert_cos'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0.9</span><span class="token punctuation">:</span>
                logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"语义相似度为: </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>row<span class="token punctuation">[</span><span class="token string">'bert_cos'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
                query_text <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span>
                target_body <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'target_body'</span><span class="token punctuation">]</span>
                target_question_id <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'target_question_id'</span><span class="token punctuation">]</span>
                target_title <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'target_title'</span><span class="token punctuation">]</span>
                tfidf_score <span class="token operator">=</span> self<span class="token punctuation">.</span>get_tfidf_score<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>query_text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target_title<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target_body<span class="token punctuation">)</span><span class="token punctuation">)</span>
                logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"tfidf得分为: </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>tfidf_score<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
                logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[query_text]: </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span><span class="token builtin">str</span><span class="token punctuation">(</span>query_text<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
                logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[target_body]: </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span><span class="token builtin">str</span><span class="token punctuation">(</span>target_body<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

                score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'bert_cos'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
                url <span class="token operator">=</span> <span class="token string">"https://ask.csdn.net/questions/{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_question_id<span class="token punctuation">)</span>
                recommend_id <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span>
                answer_id <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'answer_id'</span><span class="token punctuation">]</span>
                tag_ids <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'tag_ids'</span><span class="token punctuation">]</span>
                tag_ids <span class="token operator">=</span> tag_ids<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
                tag_id_list <span class="token operator">=</span> tag_ids<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>

                <span class="token keyword">if</span> tag_id_list <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    tag_id <span class="token operator">=</span> <span class="token boolean">None</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    tag_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tag_id_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

                method <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token comment"># method = 1 -- 加入tfidf限制</span>
                <span class="token comment"># method = 0 -- 不加入tfidf限制</span>
                query_ret<span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">if</span> tfidf_score<span class="token operator">&gt;=</span> <span class="token number">0.2</span> <span class="token keyword">and</span> method <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    query_ret<span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"加入tfidf限制..."</span><span class="token punctuation">)</span>
                <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    query_ret<span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"未加入tfidf限制..."</span><span class="token punctuation">)</span>

                query_ret<span class="token punctuation">[</span><span class="token string">'question_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target_question_id
                query_ret<span class="token punctuation">[</span><span class="token string">'answer_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> answer_id
                query_ret<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target_title
                query_ret<span class="token punctuation">[</span><span class="token string">'tag_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tag_id
                query_ret<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> score
                query_ret<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> url
                query_ret<span class="token punctuation">[</span><span class="token string">'recommend_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> recommend_id
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>query_ret<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        
        <span class="token keyword">return</span> result
<div class="hljs-button {2}" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li><li style="color: rgb(153, 153, 153);">42</li><li style="color: rgb(153, 153, 153);">43</li><li style="color: rgb(153, 153, 153);">44</li><li style="color: rgb(153, 153, 153);">45</li><li style="color: rgb(153, 153, 153);">46</li><li style="color: rgb(153, 153, 153);">47</li><li style="color: rgb(153, 153, 153);">48</li><li style="color: rgb(153, 153, 153);">49</li><li style="color: rgb(153, 153, 153);">50</li><li style="color: rgb(153, 153, 153);">51</li><li style="color: rgb(153, 153, 153);">52</li><li style="color: rgb(153, 153, 153);">53</li><li style="color: rgb(153, 153, 153);">54</li><li style="color: rgb(153, 153, 153);">55</li><li style="color: rgb(153, 153, 153);">56</li><li style="color: rgb(153, 153, 153);">57</li><li style="color: rgb(153, 153, 153);">58</li><li style="color: rgb(153, 153, 153);">59</li><li style="color: rgb(153, 153, 153);">60</li><li style="color: rgb(153, 153, 153);">61</li><li style="color: rgb(153, 153, 153);">62</li><li style="color: rgb(153, 153, 153);">63</li><li style="color: rgb(153, 153, 153);">64</li><li style="color: rgb(153, 153, 153);">65</li><li style="color: rgb(153, 153, 153);">66</li><li style="color: rgb(153, 153, 153);">67</li><li style="color: rgb(153, 153, 153);">68</li><li style="color: rgb(153, 153, 153);">69</li><li style="color: rgb(153, 153, 153);">70</li><li style="color: rgb(153, 153, 153);">71</li><li style="color: rgb(153, 153, 153);">72</li><li style="color: rgb(153, 153, 153);">73</li><li style="color: rgb(153, 153, 153);">74</li><li style="color: rgb(153, 153, 153);">75</li><li style="color: rgb(153, 153, 153);">76</li><li style="color: rgb(153, 153, 153);">77</li><li style="color: rgb(153, 153, 153);">78</li><li style="color: rgb(153, 153, 153);">79</li><li style="color: rgb(153, 153, 153);">80</li><li style="color: rgb(153, 153, 153);">81</li><li style="color: rgb(153, 153, 153);">82</li><li style="color: rgb(153, 153, 153);">83</li><li style="color: rgb(153, 153, 153);">84</li><li style="color: rgb(153, 153, 153);">85</li><li style="color: rgb(153, 153, 153);">86</li><li style="color: rgb(153, 153, 153);">87</li><li style="color: rgb(153, 153, 153);">88</li><li style="color: rgb(153, 153, 153);">89</li><li style="color: rgb(153, 153, 153);">90</li><li style="color: rgb(153, 153, 153);">91</li><li style="color: rgb(153, 153, 153);">92</li><li style="color: rgb(153, 153, 153);">93</li></ul></pre> 
<p>在取得精排的结果后，取分值最大的那条数据，且相似度分数要超过<code>0.9</code>，这个<code>0.9</code>并不是头脑发热设置的，而是通过数据分析得出的结论，限制分数阈值后，还需要计算<code>query</code>与相似度得分最高的那条结果的<code>tfidf</code>相似度，同理，这里也设置了<code>tfidf score</code>阈值，这个阈值，也是通过数据分析得出来的结论，两项限制都满足后，才会给用户推荐，这样做，大大降低了误推率。</p> 
<p>其实，如果你的训练数据是<code>&lt;query, query&gt;</code>对的话，在精排时，除了语义相似度外，你可以再构造一些其他的人工处理好的特征，如<strong>编辑距离</strong>、<strong>皮尔逊相关系数</strong>、<strong>KL散度</strong>等。</p> 
<pre data-index="11" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">class</span> <span class="token class-name">TextSimilarityML</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment"># self.train_w2v = TrainWord2Vec()</span>
        self<span class="token punctuation">.</span>tfidf <span class="token operator">=</span> joblib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>get_sentence_tfidf_model_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># self.w2v_model = KeyedVectors.load(get_sentence_word2vec_model_path())</span>
        self<span class="token punctuation">.</span>sentence_transformer_model <span class="token operator">=</span> SentenceTransformer<span class="token punctuation">(</span>get_sentence_transformers_model_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> str_a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        wordsa <span class="token operator">=</span> pseg<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>str_a<span class="token punctuation">)</span>
        cuta <span class="token operator">=</span> <span class="token string">""</span>
        seta <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> key <span class="token keyword">in</span> wordsa<span class="token punctuation">:</span>
            cuta <span class="token operator">+=</span> key<span class="token punctuation">.</span>word <span class="token operator">+</span> <span class="token string">" "</span>
            seta<span class="token punctuation">.</span>add<span class="token punctuation">(</span>key<span class="token punctuation">.</span>word<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>cuta <span class="token punctuation">,</span> seta<span class="token punctuation">]</span>


    <span class="token keyword">def</span> <span class="token function">JaccardSim</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> str_a <span class="token punctuation">,</span> str_b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        seta <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>str_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        setb <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>str_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        sa_sb <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>seta <span class="token operator">&amp;</span> setb<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>seta <span class="token operator">|</span> setb<span class="token punctuation">)</span>
        <span class="token keyword">return</span> sa_sb

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">cos_sim</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token keyword">return</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">kl_divergence</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>


    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">js_divergence</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>Q<span class="token punctuation">)</span><span class="token punctuation">:</span>
        M<span class="token operator">=</span><span class="token punctuation">(</span>P<span class="token operator">+</span>Q<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
        <span class="token keyword">return</span> <span class="token number">0.5</span><span class="token operator">*</span>scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span>P<span class="token punctuation">,</span> M<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0.5</span><span class="token operator">*</span>scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span>Q<span class="token punctuation">,</span> M<span class="token punctuation">)</span>


    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">eucl_sim</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">pearson_sim</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>b<span class="token punctuation">)</span>

        a <span class="token operator">=</span> a <span class="token operator">-</span> np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        b <span class="token operator">=</span> b <span class="token operator">-</span> np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token keyword">return</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">editDistance</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> str1 <span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> 
        lensum <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span>
        d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j
        
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>j <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
        dist <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        ratio <span class="token operator">=</span> <span class="token punctuation">(</span>lensum <span class="token operator">-</span>dist<span class="token punctuation">)</span> <span class="token operator">/</span> lensum
        <span class="token keyword">return</span> ratio

    <span class="token keyword">def</span> <span class="token function">lcs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str_a <span class="token punctuation">,</span> str_b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        lengths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str_b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">]</span>
                    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str_a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span>x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>str_a<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j<span class="token punctuation">,</span>y <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>str_b<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> x<span class="token operator">==</span>y<span class="token punctuation">:</span>
                    lengths<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> lengths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    lengths<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>lengths<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> lengths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        
        result <span class="token operator">=</span> <span class="token string">""</span>
        x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str_a<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str_b<span class="token punctuation">)</span>
        <span class="token keyword">while</span> x <span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">and</span> y <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> lengths<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> lengths<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>
                x <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> lengths<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> lengths<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                y <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">assert</span> str_a<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str_b<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                result <span class="token operator">=</span> str_a<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> result
                x <span class="token operator">-=</span> <span class="token number">1</span>
                y <span class="token operator">-=</span> <span class="token number">1</span>
        longestdist <span class="token operator">=</span> lengths<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>str_a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>str_b<span class="token punctuation">)</span><span class="token punctuation">]</span>
        ratio <span class="token operator">=</span> longestdist <span class="token operator">/</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str_a<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str_b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ratio


    <span class="token keyword">def</span> <span class="token function">tokenSimilarity</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> str_a <span class="token punctuation">,</span> str_b <span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'tfidf'</span> <span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'cos'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        vec_a <span class="token punctuation">,</span> vec_b <span class="token punctuation">,</span> model  <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'tfidf'</span><span class="token punctuation">:</span>
            str_a <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>str_a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            str_b <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenize<span class="token punctuation">(</span>str_b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            vec_a <span class="token operator">=</span> self<span class="token punctuation">.</span>tfidf<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span>str_a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span>
            vec_b <span class="token operator">=</span> self<span class="token punctuation">.</span>tfidf<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span>str_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">"bert"</span><span class="token punctuation">:</span>
            vec_a <span class="token operator">=</span> self<span class="token punctuation">.</span>sentence_transformer_model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>str_a<span class="token punctuation">]</span><span class="token punctuation">)</span>
            vec_b <span class="token operator">=</span> self<span class="token punctuation">.</span>sentence_transformer_model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>str_b<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            NotImplementedError
        result <span class="token operator">=</span> <span class="token boolean">None</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>vec_a <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>vec_b <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> sim <span class="token operator">==</span> <span class="token string">'cos'</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>cos_sim<span class="token punctuation">(</span>vec_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vec_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> sim <span class="token operator">==</span> <span class="token string">'eucl'</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>eucl_sim<span class="token punctuation">(</span>vec_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vec_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> sim <span class="token operator">==</span> <span class="token string">'pearson'</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>pearson_sim<span class="token punctuation">(</span>vec_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vec_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> sim <span class="token operator">==</span> <span class="token string">'wmd'</span> <span class="token keyword">and</span> model<span class="token punctuation">:</span>
                result <span class="token operator">=</span> model<span class="token punctuation">.</span>wmdistance<span class="token punctuation">(</span>str_a<span class="token punctuation">,</span> str_b<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> sim <span class="token operator">==</span> <span class="token string">'js'</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>js_divergence<span class="token punctuation">(</span>vec_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vec_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> sim <span class="token operator">==</span> <span class="token string">'kl'</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>kl_divergence<span class="token punctuation">(</span>vec_a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vec_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
        
    <span class="token keyword">def</span> <span class="token function">gen_simility</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{<!-- --></span>
            <span class="token string">"lcs"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>lcs<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"edit_dist"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>editDistance<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"jaccard"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>JaccardSim<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"tfidf_cos"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'tfidf'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'cos'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"tfidf_eucl"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'tfidf'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'eucl'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"tfidf_pearson"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'tfidf'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'pearson'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"tfidf_kl"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'tfidf'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'kl'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"tfidf_js"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'tfidf'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"bert_cos"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'bert'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'cos'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"bert_eucl"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'bert'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'eucl'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"bert_pearson"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>tokenSimilarity<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'bert'</span><span class="token punctuation">,</span> sim<span class="token operator">=</span><span class="token string">'pearson'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
<div class="hljs-button {2}" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li><li style="color: rgb(153, 153, 153);">42</li><li style="color: rgb(153, 153, 153);">43</li><li style="color: rgb(153, 153, 153);">44</li><li style="color: rgb(153, 153, 153);">45</li><li style="color: rgb(153, 153, 153);">46</li><li style="color: rgb(153, 153, 153);">47</li><li style="color: rgb(153, 153, 153);">48</li><li style="color: rgb(153, 153, 153);">49</li><li style="color: rgb(153, 153, 153);">50</li><li style="color: rgb(153, 153, 153);">51</li><li style="color: rgb(153, 153, 153);">52</li><li style="color: rgb(153, 153, 153);">53</li><li style="color: rgb(153, 153, 153);">54</li><li style="color: rgb(153, 153, 153);">55</li><li style="color: rgb(153, 153, 153);">56</li><li style="color: rgb(153, 153, 153);">57</li><li style="color: rgb(153, 153, 153);">58</li><li style="color: rgb(153, 153, 153);">59</li><li style="color: rgb(153, 153, 153);">60</li><li style="color: rgb(153, 153, 153);">61</li><li style="color: rgb(153, 153, 153);">62</li><li style="color: rgb(153, 153, 153);">63</li><li style="color: rgb(153, 153, 153);">64</li><li style="color: rgb(153, 153, 153);">65</li><li style="color: rgb(153, 153, 153);">66</li><li style="color: rgb(153, 153, 153);">67</li><li style="color: rgb(153, 153, 153);">68</li><li style="color: rgb(153, 153, 153);">69</li><li style="color: rgb(153, 153, 153);">70</li><li style="color: rgb(153, 153, 153);">71</li><li style="color: rgb(153, 153, 153);">72</li><li style="color: rgb(153, 153, 153);">73</li><li style="color: rgb(153, 153, 153);">74</li><li style="color: rgb(153, 153, 153);">75</li><li style="color: rgb(153, 153, 153);">76</li><li style="color: rgb(153, 153, 153);">77</li><li style="color: rgb(153, 153, 153);">78</li><li style="color: rgb(153, 153, 153);">79</li><li style="color: rgb(153, 153, 153);">80</li><li style="color: rgb(153, 153, 153);">81</li><li style="color: rgb(153, 153, 153);">82</li><li style="color: rgb(153, 153, 153);">83</li><li style="color: rgb(153, 153, 153);">84</li><li style="color: rgb(153, 153, 153);">85</li><li style="color: rgb(153, 153, 153);">86</li><li style="color: rgb(153, 153, 153);">87</li><li style="color: rgb(153, 153, 153);">88</li><li style="color: rgb(153, 153, 153);">89</li><li style="color: rgb(153, 153, 153);">90</li><li style="color: rgb(153, 153, 153);">91</li><li style="color: rgb(153, 153, 153);">92</li><li style="color: rgb(153, 153, 153);">93</li><li style="color: rgb(153, 153, 153);">94</li><li style="color: rgb(153, 153, 153);">95</li><li style="color: rgb(153, 153, 153);">96</li><li style="color: rgb(153, 153, 153);">97</li><li style="color: rgb(153, 153, 153);">98</li><li style="color: rgb(153, 153, 153);">99</li><li style="color: rgb(153, 153, 153);">100</li><li style="color: rgb(153, 153, 153);">101</li><li style="color: rgb(153, 153, 153);">102</li><li style="color: rgb(153, 153, 153);">103</li><li style="color: rgb(153, 153, 153);">104</li><li style="color: rgb(153, 153, 153);">105</li><li style="color: rgb(153, 153, 153);">106</li><li style="color: rgb(153, 153, 153);">107</li><li style="color: rgb(153, 153, 153);">108</li><li style="color: rgb(153, 153, 153);">109</li><li style="color: rgb(153, 153, 153);">110</li><li style="color: rgb(153, 153, 153);">111</li><li style="color: rgb(153, 153, 153);">112</li><li style="color: rgb(153, 153, 153);">113</li><li style="color: rgb(153, 153, 153);">114</li><li style="color: rgb(153, 153, 153);">115</li><li style="color: rgb(153, 153, 153);">116</li><li style="color: rgb(153, 153, 153);">117</li><li style="color: rgb(153, 153, 153);">118</li><li style="color: rgb(153, 153, 153);">119</li><li style="color: rgb(153, 153, 153);">120</li><li style="color: rgb(153, 153, 153);">121</li><li style="color: rgb(153, 153, 153);">122</li><li style="color: rgb(153, 153, 153);">123</li><li style="color: rgb(153, 153, 153);">124</li><li style="color: rgb(153, 153, 153);">125</li><li style="color: rgb(153, 153, 153);">126</li><li style="color: rgb(153, 153, 153);">127</li><li style="color: rgb(153, 153, 153);">128</li><li style="color: rgb(153, 153, 153);">129</li><li style="color: rgb(153, 153, 153);">130</li><li style="color: rgb(153, 153, 153);">131</li><li style="color: rgb(153, 153, 153);">132</li><li style="color: rgb(153, 153, 153);">133</li><li style="color: rgb(153, 153, 153);">134</li><li style="color: rgb(153, 153, 153);">135</li><li style="color: rgb(153, 153, 153);">136</li><li style="color: rgb(153, 153, 153);">137</li><li style="color: rgb(153, 153, 153);">138</li><li style="color: rgb(153, 153, 153);">139</li><li style="color: rgb(153, 153, 153);">140</li><li style="color: rgb(153, 153, 153);">141</li><li style="color: rgb(153, 153, 153);">142</li><li style="color: rgb(153, 153, 153);">143</li><li style="color: rgb(153, 153, 153);">144</li><li style="color: rgb(153, 153, 153);">145</li><li style="color: rgb(153, 153, 153);">146</li><li style="color: rgb(153, 153, 153);">147</li><li style="color: rgb(153, 153, 153);">148</li><li style="color: rgb(153, 153, 153);">149</li></ul></pre> 
<p>构造好这些人工特征后，可以利用决策树的思想，训练各个特征的权重，所幸，在<code>lightgbm</code>中，就有这么一个方法，可以拿来即用：</p> 
<pre data-index="12" class="set-code-hide prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">
<span class="token keyword">import</span> os
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> joblib
<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> common<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>answer <span class="token keyword">import</span> get_lightgbm_train_data_path
<span class="token keyword">from</span> common<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>answer <span class="token keyword">import</span> get_lightgbm_dev_data_path
<span class="token keyword">from</span> common<span class="token punctuation">.</span>path<span class="token punctuation">.</span>model<span class="token punctuation">.</span>sentence_model <span class="token keyword">import</span> get_sentence_lightgbm_ranker_model_path


logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">LihtgbmRankerTrain</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>train_path <span class="token operator">=</span> get_lightgbm_train_data_path<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dev_path <span class="token operator">=</span> get_lightgbm_dev_data_path<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model_path <span class="token operator">=</span> get_sentence_lightgbm_ranker_model_path<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>
            <span class="token string">'boosting_type'</span><span class="token punctuation">:</span> <span class="token string">'gbdt'</span><span class="token punctuation">,</span>
            <span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token string">'objective'</span><span class="token punctuation">:</span> <span class="token string">'binary'</span><span class="token punctuation">,</span>
            <span class="token comment"># 'nthread': 3,  </span>
            <span class="token string">'num_leaves'</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span>
            <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token punctuation">,</span>
            <span class="token string">'max_bin'</span><span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span>
            <span class="token string">'subsample_for_bin'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
            <span class="token string">'subsample'</span><span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
            <span class="token string">'subsample_freq'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token string">'colsample_bytree'</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>
            <span class="token string">'reg_alpha'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token string">'reg_lambda'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
            <span class="token string">'min_split_gain'</span><span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
            <span class="token string">'min_child_weight'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token string">'min_child_samples'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token string">'scale_pos_weight'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token comment"># 'max_position': 20,</span>
            <span class="token string">'group'</span><span class="token punctuation">:</span> <span class="token string">'name:groupId'</span><span class="token punctuation">,</span>
            <span class="token string">'metric'</span><span class="token punctuation">:</span> <span class="token string">'auc'</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token boolean">None</span>
            logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"模型不存在，请先训练..."</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"加载模型: </span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>self<span class="token punctuation">.</span>model_path<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>model <span class="token operator">=</span> joblib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model_path<span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        train_data <span class="token operator">=</span> joblib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_path<span class="token punctuation">)</span>
        dev_data <span class="token operator">=</span> joblib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dev_path<span class="token punctuation">)</span>
        train_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        train_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> train_data<span class="token punctuation">:</span>
            item <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            x <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            y <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            train_x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            train_y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        dev_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        dev_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> dev_data<span class="token punctuation">:</span>
            item <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            x <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            y <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            dev_x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            dev_y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> train_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> dev_x<span class="token punctuation">,</span> dev_y

    
    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        train_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> dev_x<span class="token punctuation">,</span> dev_y <span class="token operator">=</span> self<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
        train_x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span>
        train_y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_y<span class="token punctuation">)</span>
        dev_x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dev_x<span class="token punctuation">)</span>
        dev_y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dev_y<span class="token punctuation">)</span>

        query_train <span class="token operator">=</span> <span class="token punctuation">[</span>train_x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        query_val <span class="token operator">=</span> <span class="token punctuation">[</span>dev_x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

        self<span class="token punctuation">.</span>gbm <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMRanker<span class="token punctuation">(</span><span class="token operator">**</span>self<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>gbm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x <span class="token punctuation">,</span> train_y <span class="token punctuation">,</span> group<span class="token operator">=</span>query_train <span class="token punctuation">,</span> eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>dev_x <span class="token punctuation">,</span> dev_y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> eval_group<span class="token operator">=</span><span class="token punctuation">[</span>query_val<span class="token punctuation">]</span> <span class="token punctuation">,</span> eval_at<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> early_stopping_rounds<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
        joblib<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>gbm<span class="token punctuation">,</span> self<span class="token punctuation">.</span>model_path<span class="token punctuation">)</span>
    

    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> recall_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>recall_data<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
<div class="hljs-button {2}" data-title="复制"></div></code><div class="hide-preCode-box"><span class="hide-preCode-bt"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li><li style="color: rgb(153, 153, 153);">42</li><li style="color: rgb(153, 153, 153);">43</li><li style="color: rgb(153, 153, 153);">44</li><li style="color: rgb(153, 153, 153);">45</li><li style="color: rgb(153, 153, 153);">46</li><li style="color: rgb(153, 153, 153);">47</li><li style="color: rgb(153, 153, 153);">48</li><li style="color: rgb(153, 153, 153);">49</li><li style="color: rgb(153, 153, 153);">50</li><li style="color: rgb(153, 153, 153);">51</li><li style="color: rgb(153, 153, 153);">52</li><li style="color: rgb(153, 153, 153);">53</li><li style="color: rgb(153, 153, 153);">54</li><li style="color: rgb(153, 153, 153);">55</li><li style="color: rgb(153, 153, 153);">56</li><li style="color: rgb(153, 153, 153);">57</li><li style="color: rgb(153, 153, 153);">58</li><li style="color: rgb(153, 153, 153);">59</li><li style="color: rgb(153, 153, 153);">60</li><li style="color: rgb(153, 153, 153);">61</li><li style="color: rgb(153, 153, 153);">62</li><li style="color: rgb(153, 153, 153);">63</li><li style="color: rgb(153, 153, 153);">64</li><li style="color: rgb(153, 153, 153);">65</li><li style="color: rgb(153, 153, 153);">66</li><li style="color: rgb(153, 153, 153);">67</li><li style="color: rgb(153, 153, 153);">68</li><li style="color: rgb(153, 153, 153);">69</li><li style="color: rgb(153, 153, 153);">70</li><li style="color: rgb(153, 153, 153);">71</li><li style="color: rgb(153, 153, 153);">72</li><li style="color: rgb(153, 153, 153);">73</li><li style="color: rgb(153, 153, 153);">74</li><li style="color: rgb(153, 153, 153);">75</li><li style="color: rgb(153, 153, 153);">76</li><li style="color: rgb(153, 153, 153);">77</li><li style="color: rgb(153, 153, 153);">78</li><li style="color: rgb(153, 153, 153);">79</li><li style="color: rgb(153, 153, 153);">80</li><li style="color: rgb(153, 153, 153);">81</li><li style="color: rgb(153, 153, 153);">82</li><li style="color: rgb(153, 153, 153);">83</li><li style="color: rgb(153, 153, 153);">84</li><li style="color: rgb(153, 153, 153);">85</li><li style="color: rgb(153, 153, 153);">86</li><li style="color: rgb(153, 153, 153);">87</li><li style="color: rgb(153, 153, 153);">88</li><li style="color: rgb(153, 153, 153);">89</li><li style="color: rgb(153, 153, 153);">90</li></ul></pre> 
<p><strong>注意：</strong> 如果你是<code>&lt;query, query&gt;</code>对的数据，你可以这样来精排，如果你和我一样，是<code>&lt;query, answer&gt;</code>对的数据，你这样精排的意义就不大。因为最后训练出来的权重，除了语义相似度特征的权重较大，其他特征的权重都接近<code>0</code>。（建议亲自动手试试，实践出真知！）</p> 
<h1><a name="t8"></a><a id="_796"></a>优化策略</h1> 
<p>在做完精排后，你以为事情就结束了？</p> 
<p>其实远没有，用<code>&lt;query, answer&gt;</code>对的数据集，只能解决一部分问题，要想带来质的提升，一方面是你的问答库要非常全，这个需要长时间积累，另一方面，你需要标注<code>&lt;query, query&gt;</code>对的数据，但这种数据非常难标注，往往需要专业的<code>IT</code>从业人员标注，才能获取到一个较为准确的结果。<br> 但是，我们<code>CSDN</code>上的用户，都是专业的<code>IT</code>从业人员，在问答的前端页面上，我们可以增加几个按钮，让用户帮我们来标注，这样不但成本低，且标注效果好，所以，我在精排后返回的数据中，增加了一个<code>recommend_id</code>字段，用来标记推荐的结果，用户点击按钮后，会更新这条推荐结果的状态，如下图：<img src="https://img-blog.csdnimg.cn/fa345c87468e4b0e8786480b641f8e6b.png" alt="请添加图片描述"></p> 
<h1><a name="t9"></a><a id="_801"></a>结果</h1> 
<p><img src="https://img-blog.csdnimg.cn/ff529df2ec1a4a9da5c71e5afffa265e.png" alt="请添加图片描述"><br> 目标是<code>5%</code>，虽然达到了目标，但离真正地提升用户体验，还有很长一段路要走。</p> 
<p>继续加油！</p> 
<h1><a name="t10"></a><a id="_808"></a>总结</h1> 
<p>1、作为一名合格的<code>NLPer</code>，不仅要考虑模型本身的效果，更要考虑如何构建高质量的数据集。模型与模型之间的差距并不会特别大，与其花大量时间在模型上，不如花一部分时间在数据上，也许，带来的收益会更大。</p> 
<p>2、一个好的NLP项目，往往需要形成一个闭环，模型运行起来后，并不是再也不更新，我们需要持续收集用户反馈，持续跟进，持续分析<code>badcase</code>，持续迭代优化</p> 
<p>最后，有对代码感兴趣的同学，可以看我之前写的一篇文章：<a href="https://blog.csdn.net/qq_44193969/article/details/116128473">FAQ式问答系统</a></p>
                </div><div><div></div></div>
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-98b95bb57c.css" rel="stylesheet">
                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-c216769e99.css" rel="stylesheet">
        </div>